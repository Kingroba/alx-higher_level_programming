How to Utilize 2-matrix_divided.py
This module introduces a matrix division function called "matrix_divided(matrix, div)".

Usage
The function "matrix_divided(...)" returns a new matrix that is a copy of the "matrix" parameter with all elements divided by "div".

::

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
...     [3, 6, 9],
...     [12, 15, 18]
... ]
>>> print(matrix_divided(matrix, 3))
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
Please note that the quotients are rounded to a maximum of two decimal places.

::

>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
The original matrix remains unchanged.

::

>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]
The function can handle floating-point numbers as well.

::


>>> matrix = [
...     [1.1, -2.2, 3.3],
...     [4.4, 5.5, -6.6]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]
You can combine integers and floats in the matrix.

::

>>> matrix = [
...     [1, -2.2, 3, 4.4, 5],
...     [-6.6, 7.00, 8, 9.999, 10]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]
Invalid Matrices
The "matrix" parameter must be a list of lists consisting of either integers or floats. If "matrix" is not a list, a TypeError will be raised.

::

>>> matrix = "not a list"
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
::

>>> matrix = None
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

::

>>> matrix = []
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
